# Set up (install packages if you don't have them)
library(dplyr)
install.packages(c("dplyr", "ggplot2", "plotly", "tidyr"))
# Set up (install packages if you don't have them)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
risk.data <- read.csv('./data/prepped/risk-data.csv', stringsAsFactors = FALSE)
# Size of dataset
data.size <- dim(risk.data)
# How many countries?
num.countries <- length(unique(risk.data$country))
# Age groups
age.groups <- unique(risk.data$age)
# Variables of the dataset
variables <- colnames(risk.data)
# Data type of each variable
variable.types <- sapply(risk.data, typeof)
# Summary statistics of each quantitative variable
summary <- summary(risk.data[7: length(risk.data)])
print(data.size, num.countries, age.groups, variables, variable.types, summary)
# Set up (install packages if you don't have them)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
risk.data <- read.csv('./data/prepped/risk-data.csv', stringsAsFactors = FALSE)
# Size of dataset
data.size <- dim(risk.data)
# How many countries?
num.countries <- length(unique(risk.data$country))
# Age groups
age.groups <- unique(risk.data$age)
# Variables of the dataset
variables <- colnames(risk.data)
# Data type of each variable
variable.types <- sapply(risk.data, typeof)
# Summary statistics of each quantitative variable
summary <- summary(risk.data[7: length(risk.data)])
print(data.size, num.countries, age.groups, variables, variable.types, summary)
# Set up (install packages if you don't have them)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
risk.data <- read.csv('./data/prepped/risk-data.csv', stringsAsFactors = FALSE)
# Size of dataset
data.size <- dim(risk.data)
# How many countries?
num.countries <- length(unique(risk.data$country))
# Age groups
age.groups <- unique(risk.data$age)
# Variables of the dataset
variables <- colnames(risk.data)
# Data type of each variable
variable.types <- sapply(risk.data, typeof)
# Summary statistics of each quantitative variable
summary <- summary(risk.data[7: length(risk.data)])
# print(data.size, num.countries, age.groups, variables, variable.types, summary)
# Reshape long using `gather`
risk.data <- na.omit(risk.data)
reshaped <- gather(risk.data[8: length(risk.data)], 'name', 'value', na.rm = TRUE, convert = FALSE, factor_key = TRUE)
# Make histograms, facet by age
my_plot = ggplot(data = reshaped, mapping = aes(x = value)) +
geom_histogram(bins = 10) + facet_wrap(~name, scales = 'free_x')
my_plot
# Write your function here
show_dist_by_age <- function(risk) {
ggplot(data = risk.data, mapping = aes(x = risk.data[, risk])) +
geom_histogram(bins = 10) + facet_wrap(~age, scales = 'free_x')
}
# Create plot to demonstrate that it works
show_dist_by_age('high_meat')
# Write your function here
show_dist_by_sex <- function(risk) {
ggplot(risk.data, aes(risk.data[, risk], fill = sex)) + geom_density(alpha = 0.2)
}
# Create plot to demonstrate that it works
show_dist_by_sex('smoking')
# Do your data prep here
df <- risk.data
for(i in 1:nrow(df)) {
df$alcohol_use[i] <- df$alcohol_use[i] * df$pop[i]
df$drug_use[i] <- df$drug_use[i] * df$pop[i]
df$high_meat[i] <- df$high_meat[i] * df$pop[i]
df$low_exercise[i] <- df$low_exercise[i] * df$pop[i]
df$smoking[i] <- df$smoking[i] * df$pop[i]
}
df <- df %>% group_by(super_region) %>%
summarize(pop = sum(pop), alcohol_use = sum(alcohol_use), drug_use = sum(drug_use), high_meat = sum(high_meat), low_exercise = sum(low_exercise), smoking = sum(smoking))
for(i in 1:nrow(df)) {
df$alcohol_use[i] <- df$alcohol_use[i] / df$pop[i]
df$drug_use[i] <- df$drug_use[i] / df$pop[i]
df$high_meat[i] <- df$high_meat[i] / df$pop[i]
df$low_exercise[i] <- df$low_exercise[i] / df$pop[i]
df$smoking[i] <- df$smoking[i] / df$pop[i]
}
# Write your function here
show_regions_for_risk <- function(risk) {
ggplot(df) +
aes(x = super_region, y = df[,risk]) +
geom_col()
}
show_risks_for_region <- function(region) {
# Reshape
df.reshaped <- df %>% filter(super_region == region)
df.reshaped <- gather(df.reshaped[3: length(df.reshaped)], 'name', 'value', na.rm = TRUE, convert = FALSE, factor_key = TRUE)
ggplot(df.reshaped) +
aes(x = name, y = value) +
geom_col()
}
# Demonstrate your functions here
show_regions_for_risk('alcohol_use')
show_regions_for_risk <- function(risk) {
ggplot(df) +
aes(x = super_region, y = df[,risk]) +
geom_col()
}
show_risks_for_region <- function(region) {
# Reshape
df.reshaped <- df %>% filter(super_region == region)
df.reshaped <- gather(df.reshaped[3: length(df.reshaped)], 'name', 'value', na.rm = TRUE, convert = FALSE, factor_key = TRUE)
ggplot(df.reshaped) +
aes(x = name, y = value) +
geom_col()
}
# Demonstrate your functions here
show_regions_for_risk('smoking')
# Write your function here
show_regions_for_risk <- function(risk) {
ggplot(df) +
aes(x = super_region, y = df[risk]) +
geom_col()
}
show_risks_for_region <- function(region) {
# Reshape
df.reshaped <- df %>% filter(super_region == region)
df.reshaped <- gather(df.reshaped[3: length(df.reshaped)], 'name', 'value', na.rm = TRUE, convert = FALSE, factor_key = TRUE)
ggplot(df.reshaped) +
aes(x = name, y = value) +
geom_col()
}
# Demonstrate your functions here
show_regions_for_risk('smoking')
# Write your function here
show_regions_for_risk <- function(risk) {
ggplot(df) +
aes(x = super_region, y = df[risk,]) +
geom_col()
}
show_risks_for_region <- function(region) {
# Reshape
df.reshaped <- df %>% filter(super_region == region)
df.reshaped <- gather(df.reshaped[3: length(df.reshaped)], 'name', 'value', na.rm = TRUE, convert = FALSE, factor_key = TRUE)
ggplot(df.reshaped) +
aes(x = name, y = value) +
geom_col()
}
# Demonstrate your functions here
show_regions_for_risk('smoking')
ggplot(df) +
aes(x = df["super_region"], y = df[,risk]) +
geom_col()
show_regions_for_risk <- function(risk) {
ggplot(df) +
aes(x = df["super_region"], y = df[,risk]) +
geom_col()
}
show_risks_for_region <- function(region) {
# Reshape
df.reshaped <- df %>% filter(super_region == region)
df.reshaped <- gather(df.reshaped[3: length(df.reshaped)], 'name', 'value', na.rm = TRUE, convert = FALSE, factor_key = TRUE)
ggplot(df.reshaped) +
aes(x = name, y = value) +
geom_col()
}
# Demonstrate your functions here
show_regions_for_risk('smoking')
ggplot(df) +
aes(x = df[super_region], y = df["smoking"]) +
geom_col()
show_regions_for_risk <- function(risk) {
ggplot(df) +
aes(x = df[super_region], y = df["smoking"]) +
geom_col()
}
show_risks_for_region <- function(region) {
df.reshaped <- df %>% filter(super_region == region)
df.reshaped <- gather(df.reshaped[3: length(df.reshaped)], 'name', 'value', na.rm = TRUE, convert = FALSE, factor_key = TRUE)
ggplot(df.reshaped) +
aes(x = name, y = value) +
geom_col()
}
# Demonstrate your functions here
show_regions_for_risk('smoking')
show_regions_for_risk <- function(risk) {
ggplot(df) +
aes(x = super_region, y = df["smoking"]) +
geom_col()
}
# Demonstrate your functions here
show_regions_for_risk('smoking')
df["smoking"]
devtools::install_github('cran/ggplot2')
install devtools
install "devtools"
iinstall.packages(devtools)
install.packages(devtools)
install.packages("devtools")
devtools::install_github('cran/ggplot2')
# Demonstrate your functions here
show_regions_for_risk('smoking')
# Write your function here
show_regions_for_risk <- function(risk) {
ggplot(df) +
aes(x = super_region, y = df[risk]) +
geom_col()
}
show_risks_for_region <- function(region) {
# Reshape
df.reshaped <- df %>% filter(super_region == region)
df.reshaped <- gather(df.reshaped[3: length(df.reshaped)], 'name', 'value', na.rm = TRUE, convert = FALSE, factor_key = TRUE)
ggplot(df.reshaped) +
aes(x = name, y = value) +
geom_col()
}
# Demonstrate your functions here
show_regions_for_risk('smoking')
